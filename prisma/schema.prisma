// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  small
  medium
  large
  extralarge
  unique
}

enum Role {
  admin
  user
}

model InStock {
  id        String  @id @default(uuid())
  size      String
  price     Float
  oldPrice  Float?
  productId String
  colors    Color[] // Cambiar de String[] a Color[] para la relación

  //* relations
  Product Product @relation(fields: [productId], references: [id])
}

model Color {
  id    String @id @default(uuid())
  name  String
  stock Int    @default(1)

  //* relations
  inStock   InStock @relation(fields: [inStockId], references: [id])
  inStockId String
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  Product Product[]
}

model DiscountCode {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  discount    Float
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  usageLimit  Int? // Número máximo de usos permitidos (opcional)
  usageCount  Int       @default(0) // Número de veces que se ha utilizado el código

  //* relations
  Order Order[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  slug        String   @unique
  tags        String[] @default([])
  enabled     Boolean  @default(true)
  unique      Boolean
  useStock    Boolean  @default(false)

  //* relations
  categoryName Category @relation(fields: [category], references: [name])
  category     String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]
  inStock      InStock[]
  // sizes           Size[]         @default([])

  @@index([category])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  //* relations
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id    String @id @default(uuid())
  name  String
  email String @unique
  role  Role   @default(user)
  image String

  address UserAddress?

  //* relations 
  Order Order[]
}

model Country {
  id   String @id
  name String

  //* relations 
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model Province {
  id   String @id
  name String

  //* relations 
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  //* relations
  country    Country  @relation(fields: [countryId], references: [id])
  countryId  String
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

enum OrderStatus {
  PENDING
  PROCESSING
  PRODUCTION
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ShippingMethod {
  RETIRO
  CADETE
  CORREO
}

enum PaymentMethod {
  MERCADOPAGO
  TRANSFERENCIA
}

//* purchase order
model Order {
  id               String          @id @default(uuid())
  total            Float
  items            Int
  isPaid           Boolean         @default(false)
  status           OrderStatus     @default(PENDING)

  shippingMethod   ShippingMethod?
  shippingAmount   Int           @default(0)

  paidAt           DateTime?
  paymentMethod    PaymentMethod?
  transactionImage String?
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //* relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItems   OrderItem[]
  OrderAddress OrderAddress?

  discountCodeId String?
  DiscountCode   DiscountCode? @relation(fields: [discountCodeId], references: [id])
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     String
  color    String

  //* relations
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  //* relations
  country    Country  @relation(fields: [countryId], references: [id])
  countryId  String
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
